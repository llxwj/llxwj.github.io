<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on llxwj</title>
    <link>http://localhost:1313/tags/golang/</link>
    <description>Recent content in Golang on llxwj</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 18 Oct 2015 16:16:35 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Git技巧记录</title>
      <link>http://localhost:1313/post/git/</link>
      <pubDate>Sun, 18 Oct 2015 16:16:35 +0800</pubDate>
      
      <guid>http://localhost:1313/post/git/</guid>
      <description>

&lt;h1 id=&#34;让git忽略ssl证书异常技巧:1c1ef82aae62aeea8eedcb5f455b129b&#34;&gt;让Git忽略SSL证书异常技巧&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.myexception.cn/operating-system/1594593.html&#34;&gt;复制源&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;当你通过HTTPS访问Git远程仓库，如果服务器的SSL证书未经过第三方机构签署，那么Git就会报错。这是十分合理的设计，毕竟未知的没有签署过的证书意味着很大安全风险。但是，如果你正好在架设Git服务器，而正式的SSL证书没有签发下来，你为了赶时间生成了自签署的临时证书，怎样才是最便捷的测试手段。&lt;/p&gt;

&lt;p&gt;本文记录一种比较好的做法：&lt;/p&gt;

&lt;p&gt;第一步，克隆远程仓库时，用env命令设置GIT_SSL_NO_VERIFY环境变量为&amp;rdquo;ture&amp;rdquo;，并同时调用正常的git clone命令。完整的命令如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;env GIT_SSL_NO_VERIFY=true git clone https://&amp;lt;host_name/git/project.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第二步，在克隆完毕的仓库中将http.sslVerify设置为&amp;rdquo;false&amp;rdquo;。完整的命令如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git config http.sslVerify &amp;quot;false&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;点评：
以上方法应该是Git处理可信任的SSL临时证书很好的方法，第一步使用env命令保证了忽略证书错误是单次行为，不会成为默认的设置。第二次，则把忽略证书错误的设置限定在特定的仓库，避免扩大该设置的适用范围而引起的潜在安全风险。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>